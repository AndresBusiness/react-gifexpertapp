{"version":3,"sources":["components/AddCategory.js","components/GridGifItem.js","helpers/getGif.js","hooks/useFetchGif.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GridGifItem","title","url","className","src","alt","getGif","categoria","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","useFetchGif","loading","state","setState","useEffect","then","imgs","GifGrid","imagenes","imagen","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACE,0BAAOC,SAXY,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAG,OAAGP,GAAH,mBAAkBO,OACnCN,EAAc,OAOhB,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAnBqB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,YCEZG,EATK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC3B,OACE,yBAAKC,UAAU,0CACb,yBAAKC,IAAMF,EAAKG,IAAKJ,IACrB,2BAAIA,K,uBCSKK,EAfH,uCAAI,WAAOC,GAAP,uBAAAC,EAAA,6DACRN,EADQ,iDACwCO,UAAUF,GADlD,+DAEKG,MAAMR,GAFX,cAERS,EAFQ,gBAGOA,EAAKC,OAHZ,uBAGPC,EAHO,EAGPA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GACpB,MAAO,CACLC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAKc,EAAIE,OAAOC,iBAAiBjB,QATvB,kBAaPY,GAbO,4CAAJ,sDCuBGM,EApBK,SAACb,GAAe,IAAD,EACRpB,mBAAS,CACjC0B,KAAK,GACLQ,SAAQ,IAHwB,mBAC3BC,EAD2B,KACpBC,EADoB,KAiBlC,OAXAC,qBAAU,WACRlB,EAAOC,GACNkB,MAAK,SAAAC,GACJH,EAAS,CACPV,KAAKa,EACLL,SAAQ,SAIX,CAACd,IAEGe,GCfKK,EAAU,SAAC,GAAiB,IAAhBpB,EAAe,EAAfA,UAAe,EAELa,EAAYb,GAAjCqB,EAF0B,EAE/Bf,KAAeQ,EAFgB,EAEhBA,QAEtB,OACE,oCACE,4BAAKd,GACHc,GAAW,yCACZ,yBAAKlB,UAAU,aAERyB,EAASb,KAAI,SAACc,GAAD,OACZ,kBAAC,EAAD,eACAC,IAAMD,EAAOZ,IACTY,UCdNE,EAAe,WAAO,IAAD,EAEM5C,mBAAS,CAAC,cAFhB,mBAEvB6C,EAFuB,KAEX9C,EAFW,KAQ9B,OACI,6BACI,8CACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAE5B,4BAEM8C,EAAWjB,KAAI,SAAAR,GACb,OAAO,kBAAC,EAAD,CACLA,UAAWA,EACXuB,IAAKvB,UClB3B0B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.8a0ab4bb.chunk.js","sourcesContent":["import React , {useState} from 'react'\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({setCategories}) => {\n\n  const [inputValue, setInputValue] = useState('')\n\n  const handleInputValue = (e)=>{\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e)=>{\n    e.preventDefault();\n\n    if(inputValue.trim().length > 2){\n      setCategories(cat=>[inputValue, ...cat]);\n      setInputValue('');\n    }\n  }\n\n\n  return (\n    <form  onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      value={inputValue}\n      onChange={handleInputValue}\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n","import React from 'react'\n\nconst GridGifItem = ({title, url}) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={ url} alt={title}/>\n      <p>{title}</p>\n    </div>\n  )\n}\n\nexport default GridGifItem;\n","const getGif =  async (categoria)=>{\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=YKoJF1O841WrNMcACFCN85Wuw1Ux8iTz`;\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n\n  const gifs = data.map(img=>{\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n\n    }\n  })\n  return gifs;\n}\nexport default getGif;\n","import {useState, useEffect} from 'react';\nimport getGif from './../helpers/getGif'\n\nconst useFetchGif = (categoria) => {\n const [state, setState] = useState({\n   data:[],\n   loading:true\n });\n\n useEffect(()=>{\n   getGif(categoria)\n   .then(imgs=>{\n     setState({\n       data:imgs,\n       loading:false\n     })\n   })\n\n }, [categoria])\n\n return state;\n}\n\nexport default useFetchGif\n","import React from 'react'\nimport GridGifItem from './GridGifItem'\n\nimport useFetchGif from './../hooks/useFetchGif'\n\nexport const GifGrid = ({categoria}) => {\n\n  const {data:imagenes, loading }= useFetchGif(categoria);\n\n  return (\n    <>\n      <h3>{categoria}</h3>\n      { loading && <p>Loading...</p>}\n       <div className=\"card-grid\">\n            {\n              imagenes.map((imagen)=>(\n               <GridGifItem\n               key={ imagen.id }\n               {...imagen} />\n              ))\n            }\n        </div>\n    </>\n\n  )\n}\n","import React, {useState} from 'react';\nimport {AddCategory} from './components/AddCategory';\nimport {GifGrid} from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd= ()=>{\n    //   setCategories(['nueva banda', ...categories]);\n    // }\n\n    return (\n        <div>\n            <h2>Gif Expert App</h2>\n            <hr />\n            <AddCategory setCategories={setCategories}/>\n\n            <ol>\n                {\n                  categories.map(categoria=>{\n                    return <GifGrid\n                      categoria={categoria}\n                      key={categoria}/>;\n                  })\n                }\n            </ol>\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}